# -*- coding: utf-8 -*-

# --- –ë–õ–û–ö 1: –Ü–ú–ü–û–†–¢–ò –¢–ê –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ---
import asyncio
import logging
import os
from aiohttp import web
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.strategy import FSMStrategy  # <-- –û–°–¨ –¶–ï–ô –†–Ø–î–û–ö
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    FSInputFile
)
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞
logging.basicConfig(level=logging.INFO)

# --- –ë–õ–û–ö 2: –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø ---
# !!! –í–°–¢–ê–í–¢–ï –°–Æ–î–ò –í–ê–® –ê–ö–¢–£–ê–õ–¨–ù–ò–ô –¢–û–ö–ï–ù, –û–¢–†–ò–ú–ê–ù–ò–ô –í–Ü–î @BotFather !!!
BOT_TOKEN = "8491104942:AAHR5qea7wy7pLz4QpnC3jPUIZ4gAyi3J0w" 

# ID –∫–∞–Ω–∞–ª—É, –æ—Ç—Ä–∏–º–∞–Ω–∏–π –≤—ñ–¥ @userinfobot
CHANNEL_ID = -1003030288382 
ADMIN_ID = 715211707
WEB_SERVER_HOST = "https://my-telegram-shop2222.onrender.com"  # –í–∞—à–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑ Render
WEB_SERVER_PORT = int(os.environ.get('PORT', 8080))
# --- –ù–û–í–ï: –õ—ñ—á–∏–ª—å–Ω–∏–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å ---
ORDER_COUNTER = 1000

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
bot = Bot(token=BOT_TOKEN)
# –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ FSMStrategy.CHAT, —â–æ–± —Å—Ç–∞–Ω–∏ –±—É–ª–∏ –æ–∫—Ä–µ–º–∏–º–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —á–∞—Ç—É
dp = Dispatcher(fsm_strategy=FSMStrategy.CHAT)




# --- –ë–õ–û–ö 3: –î–ê–ù–Ü (–¢–û–í–ê–†–ò, –¢–ï–ö–°–¢–ò) ---
PRODUCTS = {
    "1": {
        "name": "–û–ª—ñ–≤–µ—Ü—å —Å–∏–Ω—ñ–π",
        "short_desc": "–î—É–∂–µ –≥–∞—Ä–Ω–∏–π –æ–ª—ñ–≤–µ—Ü—å —è–∫–∏–π –∫—Ä–∞—Å–∏–≤–æ –ø–∏—à–µ.",
        "full_desc": "–û–ª—ñ–≤–µ—Ü—å ‚Äî —Ü–µ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–∏—Å—å–º–∞, –º–∞–ª—é–≤–∞–Ω–Ω—è –∞–±–æ –∫—Ä–µ—Å–ª–µ–Ω–Ω—è...",
        "photo": "images/1.JPG",
        "prices": [
            {"quantity": 1, "price": 0.3},
            {"quantity": 3, "price": 0.5},
            {"quantity": 5, "price": 0.12}
        ]
    },
    "2": {
        "name": "–ß–∞—à–∫–∞ —á–µ—Ä–≤–æ–Ω–∞",
        "short_desc": "–î—É–∂–µ –≥–∞—Ä–Ω–∞ —á–∞—à–∫–∞ –∑ —è–∫–æ—ó –ø—Ä–∏—î–º–Ω–æ –ø–∏—Ç–∏.",
        "full_desc": "–ù–µ–≤–µ–ª–∏–∫–∞ –ø–æ—Å—É–¥–∏–Ω–∞ (–Ω–∞–π—á–∞—Å—Ç—ñ—à–µ –∑ —Ä—É—á–∫–æ—é)...",
        "photo": "images/2.JPG",
        "prices": [
            {"quantity": 1, "price": 0.2},
            {"quantity": 3, "price": 0.3},
            {"quantity": 5, "price": 0.8}
        ]
    },
    "3": {
        "name": "–†—É—á–∫–∞ —Ñ—ñ–æ–ª–µ—Ç–æ–≤–∞",
        "short_desc": "–î—É–∂–µ –≥–∞—Ä–Ω–∞ —Ä—É—á–∫–∞ –∑ –≥–∞—Ä–Ω–∏–º –ø–æ—á–µ—Ä–∫–æ–º –≤ –∫–æ–º–ø–ª–µ–∫—Ç—ñ.",
        "full_desc": "–†—É—á–∫–∞ ‚Äî —Ü–µ –∫–∞–Ω—Ü–µ–ª—è—Ä—Å—å–∫–µ –ø—Ä–∏–ª–∞–¥–¥—è –¥–ª—è –∑–∞–ª–∏—à–µ–Ω–Ω—è —á–æ—Ä–Ω–∏–ª—å–Ω–æ–≥–æ —Å–ª—ñ–¥—É...",
        "photo": "images/3.JPG",
        "prices": [
            {"quantity": 1, "price": 0.3},
            {"quantity": 3, "price": 0.5},
            {"quantity": 5, "price": 0.11}
        ]
    },
    "4": {
        "name": "–ü–µ–Ω–∞–ª —Ä—ñ–∑–Ω–æ–∫–æ–ª—å–æ—Ä–æ–≤–∏–π",
        "short_desc": "–ü–µ–Ω–∞–ª –æ—Ñ—ñ–≥—î–Ω–Ω–∏–π –∑–∞—Ä—è–∂–µ–Ω–∏–π –Ω–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω—ñ –µ–º–æ—Ü—ñ—ó.",
        "full_desc": "–ü–µ–Ω–∞–ª ‚Äî —Ü–µ –Ω–µ–≤–µ–ª–∏–∫–∏–π —Ñ—É—Ç–ª—è—Ä, –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∞–±–æ –∫–æ—Ä–æ–±–æ—á–∫–∞...",
        "photo": "images/4.JPG",
        "prices": [
            {"quantity": 1, "price": 0.3},
            {"quantity": 3, "price": 0.5},
            {"quantity": 5, "price": 0.11}
        ]
    },
    "5": {
        "name": "–õ—ñ–Ω—ñ–π–∫–∞ –¥–æ–≤–≥–∞",
        "short_desc": "–î–ª—è –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è —Å–≤–æ–≥–æ –µ–≥–æ.",
        "full_desc": "–õ—ñ–Ω—ñ–π–∫–∞ ‚Äì —Ü–µ –ø—Ä–æ—Å—Ç–∏–π –≤–∏–º—ñ—Ä—é–≤–∞–ª—å–Ω–∏–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç...",
        "photo": "images/5.JPG",
        "prices": [
            {"quantity": 1, "price": 0.9},
            {"quantity": 3, "price": 1.6},
            {"quantity": 5, "price": 2.5}
        ]
    }
}

# –¢–µ–∫—Å—Ç–∏ –¥–ª—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏—Ö —Ä–æ–∑–¥—ñ–ª—ñ–≤
TEXT_SHIPPING = "<b>üöö –î–æ—Å—Ç–∞–≤–∫–∞</b>\n\n–ó–¥—ñ–π—Å–Ω—é—î—Ç—å—Å—è –ø–µ—Ä–µ–≤—ñ–∑–Ω–∏–∫–æ–º –ù–æ–≤–æ—ó –ø–æ—à—Ç–∏ –Ω–∞ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –∞–±–æ –ø–æ—à—Ç–æ–º–∞—Ç."
TEXT_PAYMENT = "<b>üí≥ –û–ø–ª–∞—Ç–∞</b>\n\n–ó–¥—ñ–π—Å–Ω—é—î—Ç—å—Å—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏, USDC, USDT."
TEXT_RULES = "<b>üìú –ü—Ä–∞–≤–∏–ª–∞</b>\n\n–ü–æ–≤–æ–¥–∏–º–æ —Å–µ–±–µ —á—î–º–Ω–æ —ñ –Ω—ñ–∫–æ–º—É –Ω–µ –≥—Ä—É–±—ñ—è–Ω–∏–º–æ."

# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ—à–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤ –ø–∞–º'—è—Ç—ñ
user_carts = {}

# --- –ù–û–í–ï: –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –æ—á—ñ–∫—É–≤–∞–Ω—å –≤ –∫–∞–Ω–∞–ª—ñ ---
channel_context = {}


# --- –ë–õ–û–ö 4: –°–¢–ê–ù–ò FSM ---
class OrderState(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_city = State()
    waiting_for_post = State()
    waiting_for_payment_confirmation = State()

# --- –ë–õ–û–ö 5: –ö–õ–ê–í–Ü–ê–¢–£–†–ò ---
main_menu_button = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ú–µ–Ω—é ‚ò∞")]], resize_keyboard=True)

def get_main_menu_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–¢–æ–≤–∞—Ä–∏ üõçÔ∏è", callback_data="show_products")],
        [InlineKeyboardButton(text="–î–æ—Å—Ç–∞–≤–∫–∞ üöö", callback_data="show_shipping"), InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∞ üí≥", callback_data="show_payment")],
        [InlineKeyboardButton(text="–ü—Ä–∞–≤–∏–ª–∞ üìú", callback_data="show_rules")]
    ])

def get_cart_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚úîÔ∏è", callback_data="checkout")],
        [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ–∫—É–ø–∫–∏ üõçÔ∏è", callback_data="show_products")]
    ])

# --- –ë–õ–û–ö 6: –ì–û–õ–û–í–ù–Ü –û–ë–†–û–ë–ù–ò–ö–ò (START, MENU) ---
@dp.message(Command("start"))
async def handle_start(message: types.Message):
    await message.answer("üëã –í—ñ—Ç–∞—î–º–æ —É –Ω–∞—à–æ–º—É –º–∞–≥–∞–∑–∏–Ω—ñ!", reply_markup=main_menu_button)

@dp.message(F.text == "–ú–µ–Ω—é ‚ò∞")
async def handle_menu_button(message: types.Message):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–æ–∑–¥—ñ–ª:", reply_markup=get_main_menu_keyboard())

# --- –ë–õ–û–ö 7: –û–ë–†–û–ë–ù–ò–ö–ò –Ü–ù–§–û–†–ú–ê–¶–Ü–ô–ù–ò–• –†–û–ó–î–Ü–õ–Ü–í ---
@dp.callback_query(F.data.in_({"show_shipping", "show_payment", "show_rules", "back_to_main_menu"}))
async def show_info_sections(callback: types.CallbackQuery):
    text = ""
    if callback.data == "show_shipping": text = TEXT_SHIPPING
    elif callback.data == "show_payment": text = TEXT_PAYMENT
    elif callback.data == "show_rules": text = TEXT_RULES
    else: text = "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–æ–∑–¥—ñ–ª:"
    
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=get_main_menu_keyboard())

# --- –ë–õ–û–ö 8: –û–ë–†–û–ë–ù–ò–ö–ò –ö–ê–¢–ê–õ–û–ì–£ –¢–û–í–ê–†–Ü–í ---
@dp.callback_query(F.data == "show_products")
async def show_product_list(callback: types.CallbackQuery):
    buttons = []
    for product_id, data in PRODUCTS.items():
        buttons.append([InlineKeyboardButton(text=f"–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ø—Ä–æ '{data['name']}'", callback_data=f"product_details:{product_id}")])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="back_to_main_menu")])
    
    await callback.message.edit_text("<b>–ù–∞—à—ñ —Ç–æ–≤–∞—Ä–∏:</b>", parse_mode="HTML", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

@dp.callback_query(F.data.startswith("product_details:"))
async def show_product_details(callback: types.CallbackQuery):
    product_id = callback.data.split(":")[1]
    data = PRODUCTS[product_id]
    
    text = f"<b>{data['name']}</b>\n\n{data['full_desc']}"
    photo = FSInputFile(data['photo'])
    
    buttons = []
    for price_info in data['prices']:
        quantity = price_info['quantity']
        price = price_info['price']
        buttons.append([InlineKeyboardButton(text=f"–ö—É–ø–∏—Ç–∏ {quantity} —à—Ç. - {price}$", callback_data=f"add_to_cart:{product_id}:{quantity}:{price}")])
    
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Ç–æ–≤–∞—Ä—ñ–≤", callback_data="show_products")])
    
    await callback.message.answer_photo(photo=photo, caption=text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    try: await callback.message.delete()
    except Exception: pass

# --- –ë–õ–û–ö 9: –û–ë–†–û–ë–ù–ò–ö–ò –ö–û–®–ò–ö–ê ---
@dp.callback_query(F.data.startswith("add_to_cart:"))
async def add_to_cart(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    parts = callback.data.split(":")
    product_id, quantity, price = parts[1], int(parts[2]), float(parts[3])

    if user_id not in user_carts:
        user_carts[user_id] = {}
    
    cart_item_key = f"{product_id}_{quantity}" 
    
    user_carts[user_id][cart_item_key] = {'product_id': product_id, 'quantity': quantity, 'price': price}

    product_name = PRODUCTS[product_id]['name']
    await callback.answer(f"–î–æ–¥–∞–Ω–æ: {product_name} ({quantity} —à—Ç.)", show_alert=True)
    
    await callback.message.answer(f"‚úÖ –¢–æ–≤–∞—Ä '{product_name}' ({quantity} —à—Ç.) –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–æ—à–∏–∫–∞ üõí", callback_data="show_cart")],
        [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ–∫—É–ø–∫–∏ üõçÔ∏è", callback_data="show_products")]
    ]))
    try: await callback.message.delete()
    except Exception: pass

@dp.callback_query(F.data == "show_cart")
async def show_cart(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    cart = user_carts.get(user_id, {})

    if not cart:
        await callback.answer("–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π!", show_alert=True)
        return

    cart_text = "<b>üõí –í–∞—à –∫–æ—à–∏–∫:</b>\n\n"
    total_sum = 0
    for item in cart.values():
        product = PRODUCTS[item['product_id']]
        cart_text += f"üîπ {product['name']} (x{item['quantity']}) - <b>{item['price']}$</b>\n"
        total_sum += item['price']
    
    cart_text += f"\n<b>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total_sum:.2f}$</b>"
    
    await callback.message.edit_text(cart_text, parse_mode="HTML", reply_markup=get_cart_keyboard())

# --- –ë–õ–û–ö 10: –û–ë–†–û–ë–ù–ò–ö–ò –û–§–û–†–ú–õ–ï–ù–ù–Ø –ó–ê–ú–û–í–õ–ï–ù–ù–Ø (FSM) ---
@dp.callback_query(F.data == "checkout")
async def start_checkout(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –≤–∞—à–µ <b>–ü–Ü–ë:</b>", parse_mode="HTML")
    await state.set_state(OrderState.waiting_for_name)

@dp.message(OrderState.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–î—è–∫—É—é! –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b>", parse_mode="HTML")
    await state.set_state(OrderState.waiting_for_phone)

@dp.message(OrderState.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("–í–∫–∞–∂—ñ—Ç—å –≤–∞—à–µ <b>–º—ñ—Å—Ç–æ:</b>", parse_mode="HTML")
    await state.set_state(OrderState.waiting_for_city)

@dp.message(OrderState.waiting_for_city)
async def process_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.answer("–í–∫–∞–∂—ñ—Ç—å <b>–Ω–æ–º–µ—Ä –ø–æ—à—Ç–æ–º–∞—Ç—É '–ù–æ–≤–æ—ó –ü–æ—à—Ç–∏':</b>", parse_mode="HTML")
    await state.set_state(OrderState.waiting_for_post)

@dp.message(OrderState.waiting_for_post)
async def process_post_office(message: types.Message, state: FSMContext):
    await state.update_data(post_office=message.text)
    user_data = await state.get_data()
    cart_items = user_carts.get(message.from_user.id, {})
    
    order_summary = "<b>‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>\n\n"
    order_summary += f"<b>–ü–Ü–ë:</b> {user_data['name']}\n"
    order_summary += f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user_data['phone']}\n"
    order_summary += f"<b>–ú—ñ—Å—Ç–æ:</b> {user_data['city']}\n"
    order_summary += f"<b>–ü–æ—à—Ç–æ–º–∞—Ç –ù–ü:</b> {user_data['post_office']}\n\n"
    
    order_summary += "<b>–¢–æ–≤–∞—Ä–∏:</b>\n"
    total_sum = 0
    for item in cart_items.values():
        product = PRODUCTS[item['product_id']]
        order_summary += f" - {product['name']} (x{item['quantity']}) - {item['price']}$\n"
        total_sum += item['price']
    order_summary += f"\n<b>üî• –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total_sum:.2f}$</b>"
    
    await state.update_data(total_sum=total_sum)

    await message.answer(order_summary, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –æ–ø–ª–∞—Ç–∏ üí∏", callback_data="proceed_to_payment")]
    ]))


# --- –ë–õ–û–ö 11: –ü–û–í–ù–ò–ô –§–£–ù–ö–¶–Ü–û–ù–ê–õ –û–ü–õ–ê–¢–ò –¢–ê –ö–ï–†–£–í–ê–ù–ù–Ø –ó–ê–ú–û–í–õ–ï–ù–ù–Ø–ú ---

# --- –ß–∞—Å—Ç–∏–Ω–∞ 1: –õ–æ–≥—ñ–∫–∞ –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ (–≤–∏–±—ñ—Ä –º–µ—Ä–µ–∂—ñ —Ç–∞ –æ–ø–ª–∞—Ç–∞) ---
PAYMENT_ADDRESSES = {"TRC20": "TLARjDwtn6xEs1cAzRSfLNrbBLLPTVwmqf", "ERC20": "0x8656f5bdec1917a3cee864c9eb74c6d53833e023"}

def get_payment_network_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="USDT (TRC20 - Tron)", callback_data="pay_network:TRC20")], [InlineKeyboardButton(text="USDT (ERC20 - Ethereum)", callback_data="pay_network:ERC20")]])

@dp.callback_query(F.data == "proceed_to_payment")
async def select_payment_network(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∑—Ä—É—á–Ω—É –º–µ—Ä–µ–∂—É –¥–ª—è –æ–ø–ª–∞—Ç–∏:", reply_markup=get_payment_network_keyboard())
    await callback.answer()

# --- –ó–ú–Ü–ù–ï–ù–û: –ü–æ–∫—Ä–∞—â–µ–Ω–æ –≤–∏–≥–ª—è–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –æ–ø–ª–∞—Ç–∏ ---
@dp.callback_query(F.data.startswith("pay_network:"))
async def show_payment_details(callback: types.CallbackQuery, state: FSMContext):
    network = callback.data.split(":")[1]
    address = PAYMENT_ADDRESSES.get(network)
    user_data = await state.get_data()
    total_sum = user_data.get('total_sum', 0)
    
    payment_details = (
        f"<b>–î–ª—è –æ–ø–ª–∞—Ç–∏ –ø–µ—Ä–µ–∫–∞–∂—ñ—Ç—å —Ç–æ—á–Ω—É —Å—É–º—É –Ω–∞ –≥–∞–º–∞–Ω–µ—Ü—å.</b>\n\n"
        f"<b>–°—É–º–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥—É:</b>\n<code>{total_sum:.2f} USDT</code>\n\n"
        f"<b>–ú–µ—Ä–µ–∂–∞:</b>\n<code>{network}</code>\n\n"
        f"<b>–ì–∞–º–∞–Ω–µ—Ü—å</b> (–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∞–¥—Ä–µ—Å—É, —â–æ–± —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏):\n<code>{address}</code>\n\n"
        f"–ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –æ–ø–ª–∞—Ç–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ–ø—ñ—é–π—Ç–µ <b>ID (—Ö–µ—à) —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó</b> —Ç–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –π–æ–≥–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º —É —Ü–µ–π —á–∞—Ç –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è."
    )

    await callback.message.edit_text(payment_details, parse_mode="HTML", disable_web_page_preview=True)
    await state.set_state(OrderState.waiting_for_payment_confirmation)

# --- –ß–∞—Å—Ç–∏–Ω–∞ 2: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ ---
@dp.message(OrderState.waiting_for_payment_confirmation)
async def process_payment_confirmation(message: types.Message, state: FSMContext):
    global ORDER_COUNTER
    order_id = ORDER_COUNTER
    ORDER_COUNTER += 1

    await state.update_data(tx_id=message.text)
    user_id = message.from_user.id
    user_data = await state.get_data()
    
    cart_items = user_carts.get(user_id, {})
    cart_description = ""
    for item in cart_items.values():
        product = PRODUCTS[item['product_id']]
        cart_description += f" - {product['name']} (x{item['quantity']}) - {item['price']}$\n"

    user_link = f"@{message.from_user.username}" if message.from_user.username else f"{message.from_user.first_name}"

    admin_message = (
        f"üîî <b>–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order_id} –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è!</b>\n\n"
        f"<b>–ö–ª—ñ—î–Ω—Ç:</b> {user_link} (ID: <code>{user_id}</code>)\n"
        f"<b>–ü–Ü–ë:</b> {user_data.get('name', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user_data.get('phone', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n\n"
        f"<b>–î–æ—Å—Ç–∞–≤–∫–∞:</b>\n"
        f"<b>–ú—ñ—Å—Ç–æ:</b> {user_data.get('city', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"<b>–ü–æ—à—Ç–æ–º–∞—Ç –ù–ü:</b> {user_data.get('post_office', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n\n"
        f"<b>–¢–æ–≤–∞—Ä–∏:</b>\n{cart_description}"
        f"<b>üî• –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {user_data.get('total_sum', 0):.2f}$</b>\n\n"
        f"<b>–•–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó (TxID):</b>\n<code>{user_data.get('tx_id', '–ù–µ–º–∞—î')}</code>"
    )
    
    manager_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_order:{user_id}:{order_id}")], 
        [InlineKeyboardButton(text="‚ö†Ô∏è –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É", callback_data=f"report_problem:{user_id}:{order_id}")]
    ])
    
    try:
        await bot.send_message(CHANNEL_ID, admin_message, parse_mode="HTML", reply_markup=manager_keyboard)
        await message.answer(f"‚úÖ –î—è–∫—É—î–º–æ! –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order_id} –ø—Ä–∏–π–Ω—è—Ç–æ –≤ –æ–±—Ä–æ–±–∫—É. –ú–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ –æ–ø–ª–∞—Ç—É —Ç–∞ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.")
        user_carts.pop(user_id, None)
        await state.clear()
    except Exception as e:
        logging.error(f"–ü–û–ú–ò–õ–ö–ê –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤ –∫–∞–Ω–∞–ª (ID: {CHANNEL_ID}): {e}")
        await message.answer("üî¥ –í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

# --- –ß–∞—Å—Ç–∏–Ω–∞ 3: –õ–æ–≥—ñ–∫–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ---
@dp.callback_query(F.data.startswith("confirm_order:"))
async def handle_order_confirmation(callback: types.CallbackQuery):
    parts = callback.data.split(":")
    customer_id = int(parts[1])
    order_id = int(parts[2])

    await bot.send_message(customer_id, f"‚úÖ –í–∞—à—É –æ–ø–ª–∞—Ç—É –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º ‚Ññ{order_id} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä –¢–¢–ù –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è.")
    original_text = callback.message.text
    
    sent_keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üöö –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫—É", callback_data=f"confirm_shipment:{customer_id}:{order_id}")]])
    await callback.message.edit_text(original_text + "\n\n<b>‚úÖ –û–ü–õ–ê–¢–£ –ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–û</b>", parse_mode="HTML", reply_markup=sent_keyboard)
    await callback.answer()

@dp.callback_query(F.data.startswith("confirm_shipment:"))
async def ask_for_ttn(callback: types.CallbackQuery):
    parts = callback.data.split(":")
    customer_id = int(parts[1])
    order_id = int(parts[2])

    prompt_message = await callback.message.reply(f"–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–º–µ—Ä –¢–¢–ù –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order_id} (–∫–ª—ñ—î–Ω—Ç ID: {customer_id}).")
    
    channel_context[CHANNEL_ID] = {
        "action": "wait_ttn",
        "customer_id": customer_id, 
        "order_id": order_id,
        "order_message_id": callback.message.message_id, 
        "original_text": callback.message.text,
        "prompt_message_id": prompt_message.message_id
    }
    await callback.answer()

@dp.callback_query(F.data.startswith("report_problem:"))
async def ask_for_problem(callback: types.CallbackQuery):
    parts = callback.data.split(":")
    customer_id = int(parts[1])
    order_id = int(parts[2])

    prompt_message = await callback.message.reply(f"–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –æ–ø–∏—Å –ø—Ä–æ–±–ª–µ–º–∏ –ø–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—é ‚Ññ{order_id} –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ (ID: {customer_id}).")

    channel_context[CHANNEL_ID] = {
        "action": "wait_problem",
        "customer_id": customer_id,
        "order_id": order_id,
        "prompt_message_id": prompt_message.message_id
    }
    await callback.answer()

@dp.channel_post(F.text)
async def process_channel_post(message: types.Message):
    if message.chat.id != CHANNEL_ID or CHANNEL_ID not in channel_context:
        return

    context = channel_context[CHANNEL_ID]
    
    if context.get("action") == "wait_ttn":
        tracking_number = message.text
        customer_id = context['customer_id']
        order_id = context['order_id']
        original_text = context['original_text']
        msg_id = context['order_message_id']
        prompt_message_id = context['prompt_message_id']

        await bot.send_message(customer_id, f"–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order_id} –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ. –¢–¢–ù ‚Ññ<b>{tracking_number}</b>", parse_mode="HTML")
        
        final_text = original_text + f"\n\nüöö <b>–í–Ü–î–ü–†–ê–í–õ–ï–ù–û</b>\n<b>–¢–¢–ù:</b> <code>{tracking_number}</code>"
        await bot.edit_message_text(final_text, chat_id=CHANNEL_ID, message_id=msg_id, parse_mode="HTML")
        
        try:
            await bot.delete_message(chat_id=CHANNEL_ID, message_id=prompt_message_id)
            await message.delete()
        except Exception as e:
            logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

        del channel_context[CHANNEL_ID]

    elif context.get("action") == "wait_problem":
        problem_text = message.text
        customer_id = context['customer_id']
        order_id = context['order_id']
        prompt_message_id = context['prompt_message_id']
        
        await bot.send_message(customer_id, f"<b>üîî –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —â–æ–¥–æ –≤–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order_id}:</b>\n\n<i>¬´{problem_text}¬ª</i>", parse_mode="HTML")
        
        try:
            await bot.delete_message(chat_id=CHANNEL_ID, message_id=prompt_message_id)
            await message.delete()
        except Exception as e:
            logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É: {e}")
        
        del channel_context[CHANNEL_ID]


# --- –ë–õ–û–ö 12: –ó–ê–ü–£–°–ö –ë–û–¢–ê –ù–ê –°–ï–†–í–ï–†–Ü (WEBHOOK –†–ï–ñ–ò–ú) ---
async def on_startup(bot: Bot):
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–µ–±—Ö—É–∫ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
    webhook_url = f"{WEB_SERVER_HOST}/{BOT_TOKEN}"
    await bot.set_webhook(webhook_url)
    logging.info(f"Webhook set to {webhook_url}")

async def main():
    dp.startup.register(on_startup)

    app = web.Application()
    handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
    handler.register(app, path=f"/{BOT_TOKEN}")

    setup_application(app, dp, bot=bot)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, port=WEB_SERVER_PORT)
    await site.start()
    
    logging.info(f"Bot started on port {WEB_SERVER_PORT}!")
    await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(main())